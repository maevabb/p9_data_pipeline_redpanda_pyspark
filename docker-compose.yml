name: p9
networks:
  redpanda_network:
    driver: bridge
volumes:
  redpanda: null
  minio: null
services:
  ##################
  # Redpanda Broker
  ##################
  redpanda:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.3.8
    container_name: redpanda
    # Sets the username and password of the bootstrap SCRAM superuser
    # See https://docs.redpanda.com/current/deploy/deployment-option/self-hosted/manual/production/production-deployment/#bootstrap-a-user-account
    environment:
      RP_BOOTSTRAP_USER: "superuser:secretpassword"
    volumes:
      - redpanda:/var/lib/redpanda/data
      - ./bootstrap.yml:/etc/redpanda/.bootstrap.yaml
    networks:
      - redpanda_network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test: ["CMD", "rpk", "cluster", "info", "-X", "user=superuser", "-X", "pass=secretpassword"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      - minio
  ####################
  # Redpanda Console #
  ####################
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.8.4
    networks:
      - redpanda_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml && echo "$$CONSOLE_ROLEBINDINGS_CONFIG_FILE" > /tmp/role-bindings.yml && /app/console'
    volumes:
      - ./config:/tmp/config/
    environment:
      CONFIG_FILEPATH: ${CONFIG_FILEPATH:-/tmp/config.yml}
      CONSOLE_CONFIG_FILE: |
        # Configure a connection to the Redpanda cluster
        # See https://docs.redpanda.com/current/console/config/connect-to-redpanda/
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
          sasl:
            enabled: true
            username: superuser
            password: secretpassword
            mechanism: SCRAM-SHA-256
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
            username: superuser
            password: secretpassword
    ports:
      - 8080:8080
    depends_on:
      redpanda:
        condition: service_healthy

  createtopic:
    command:
      - topic
      - create
      - client_tickets
      - -X user=superuser
      - -X pass=secretpassword
      - -X brokers=redpanda:9092
    image: docker.redpanda.com/redpandadata/redpanda:v24.3.8
    networks:
      - redpanda_network
    depends_on:
      redpanda:
        condition: service_healthy

  ####################
  # MinIO for Tiered Storage #
  # See https://min.io/
  #
  # NOTE: MinIO is included in this quickstart for development and evaluation purposes only.
  # It is not supported for production deployments of Redpanda.
  #
  # For production environments, use one of the supported object storage providers:
  # https://docs.redpanda.com/current/deploy/deployment-option/self-hosted/manual/production/requirements/#object-storage-providers-for-tiered-storage
  ####################
  minio:
    container_name: minio
    image: minio/minio
    command: server --console-address ":9001" /data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: redpandaTieredStorage7
      MINIO_SERVER_URL: "http://minio:9000"
      MINIO_REGION_NAME: local
      MINIO_DOMAIN: minio
    volumes:
      - minio:/data
    networks:
      redpanda_network:
        aliases:
          - redpanda.minio
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      - redpanda_network
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=redpandaTieredStorage7
      - AWS_REGION=local
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio redpandaTieredStorage7) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/redpanda;
      /usr/bin/mc policy set public minio/redpanda;
      tail -f /dev/null
      "
  ticket-producer:
    build:
      context: .
      dockerfile: ticket_producer/Dockerfile.producer
    container_name: ticket-producer
    depends_on:
      - redpanda
    env_file:
      - .env
    networks:
      - redpanda_network
    restart: on-failure

  ticket-processor:
    build:
      context: .
      dockerfile: ticket_processor/Dockerfile.processor
    container_name: ticket-processor
    depends_on:
      - redpanda
    env_file:
      - .env
    networks:
      - redpanda_network
    restart: on-failure
    command: sh -c "sleep 30 && poetry run python ticket_processor.py"